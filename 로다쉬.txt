Lodash 설치방법
1. 브라우저에서 사용하기

<script src="lodash.js"></script>
2. npm으로 설치하기

$ npm i -g npm
$ npm i --save lodash
3. Node.js에서 사용하기

var _ = require('lodash');
 

Lodash 설치가 끝나면 _.함수명() 형태로 Lodash 라이브러리의 함수들을 이용할 수 있답니다.

https://lodash.com/



** git 소스 커밋

2. 원하는 소스폴더에서 git bash하기 

  개인적으로 나중에 폴더형태로 올라가길 원하기에 새로운 폴더를 만들어 그 안에 내가 올릴 소스폴더를 넣고 git bash를 해준다.


  위의 사진과 같이 blog용이라는 새로운 폴더 안에서 Git Bash Here을 누른다.

3. $ git init

  이 명령어를 입력하기 전에는 일반 디렉토리(그냥 컴터에 저장된 파일)였지만 git init으로 초기화함으로써 해당 디렉토리를 로컬 깃 저장소로 등록해주는 명령어이다. 

  여러 파일을 추적하는 .git 폴더가 생성된다. (볼려면 폴더 속에서 숨김 표시 해제해야함)


 

4. $ git status 

  저장소의 현재 상태를 나타내며, 상태 변경이 필요한 파일들을 알려준다.

 


   아직 tracking이 안되어있다고 표시되어있고 git add를 통해 트래킹해라고 한다.

5. $ git add .


  현재 폴더에 있는 모든 파일을 올리기에 git add . 을 이용해주었다.

  현재 폴더에 있는 특정 파일만 올릴려면 git add [파일명 or 폴더명] 을 해주자.

6. $ git commit -m "커밋 내용"

  로컬 저장소의 최종 단계인 Head에 파일을 등록하기 위해서는 git commit을 사용해야한다. 현재 커밋 대상이 되어있는 파일을 한 번에 모두 커밋시키며,-m뒤에는 버전 관리를 위한 커밋 메시지를 작성해야한다.


7. $ git remote add origin [내가 올릴 repository 깃 주소]


  git remote add는 현재의 로컬 저장소를 깃허브에 있는 특정 레퍼지토리에 연결하겠다는 명령어이다.

8. $ git remote -v


  연결이 잘 되었는지 확인하기 위해서는 git remote -v 명령어를 사용하면 된다. 위의 코드에서 볼 수 있듯이, 명령어를 치면 현재 로컬 저장소와 연결된 저장소 url이 반환된다.

9. $ git push origin [push할 branch 이름]

  git push 명령어를 사용하면, 드디어 로컬 저장소에 있던 파일을 원격 저장소로 보낼 수 있게 된다.


 